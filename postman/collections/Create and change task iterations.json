{
	"info": {
		"_postman_id": "78a72d27-3a6c-40d3-8b99-81d8ece5c8cb",
		"name": "Create and change task iterations",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "27247429-78a72d27-3a6c-40d3-8b99-81d8ece5c8cb"
	},
	"item": [
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "61ddbf05-7730-43e6-83ed-b3b0d5acbe04",
						"exec": [
							"let assert = require('chai').assert;",
							"let jsonData = pm.response.json();",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    assert.equal(pm.response.code,'200');",
							"});",
							"",
							"",
							"pm.test(\"Content-Type is present\", function () {",
							"    assert.isDefined(pm.response.headers.get(\"Content-Type\"));",
							"});",
							"",
							"pm.test(\"Date is present\", function () {",
							"    assert.isDefined(pm.response.headers.get(\"Date\"));",
							"});",
							"",
							"pm.test(\"Content-Encoding is present\", function () {",
							"    assert.isDefined(pm.response.headers.get(\"Content-Encoding\"));",
							"});",
							"",
							"pm.test(\"response is JSON\", function () {",
							"    assert.exists(jsonData);",
							"});",
							"",
							"pm.test(\"Token provided\", function () {",
							"    assert.exists(jsonData.id_token);",
							"});",
							"",
							"pm.environment.set('token', jsonData.id_token)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "6ca62ac3-ce4d-418b-9e1e-332194d9da1d",
						"exec": [
							"console.log('login');"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "3431b02e-c6fc-4077-b252-7f989c0d501e",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json, text/plain, */*"
					},
					{
						"key": "Accept-Language",
						"value": "en-US,en;q=0.9,it-IT;q=0.8,it;q=0.7,fr-FR;q=0.6,fr;q=0.5,de-DE;q=0.4,de;q=0.3,ru;q=0.2"
					},
					{
						"key": "Connection",
						"value": "keep-alive"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Origin",
						"value": "https://sqlverifier-50d286d70656.herokuapp.com"
					},
					{
						"key": "Referer",
						"value": "https://sqlverifier-50d286d70656.herokuapp.com/login"
					},
					{
						"key": "Sec-Fetch-Dest",
						"value": "empty"
					},
					{
						"key": "Sec-Fetch-Mode",
						"value": "cors"
					},
					{
						"key": "Sec-Fetch-Site",
						"value": "same-origin"
					},
					{
						"key": "User-Agent",
						"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36"
					},
					{
						"key": "sec-ch-ua",
						"value": "\"Google Chrome\";v=\"119\", \"Chromium\";v=\"119\", \"Not?A_Brand\";v=\"24\""
					},
					{
						"key": "sec-ch-ua-mobile",
						"value": "?0"
					},
					{
						"key": "sec-ch-ua-platform",
						"value": "\"macOS\""
					},
					{
						"key": "x-mock-match-request-headers",
						"value": "400",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"username\":\"{{adminLogin}}\",\"password\":\"{{adminPassword}}\",\"rememberMe\":false}"
				},
				"url": {
					"raw": "{{baseUrl}}/authenticate",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"authenticate"
					]
				}
			},
			"response": []
		},
		{
			"name": "get tasks list",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "bcecacfd-cb21-45f4-b35b-9c2e1a6d682d",
						"exec": [
							"let assert = require('chai').assert",
							"let jsonData = pm.response.json();",
							"let currentAmountOfTasks = jsonData.length;",
							"const ids = pm.environment.get(\"ids\") || [];",
							"console.log(currentAmountOfTasks)",
							"",
							"pm.environment.set('currentAmountOfTasks', currentAmountOfTasks)",
							"pm.environment.set(\"ids\", ids)",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    assert.equal(pm.response.code,'200');",
							"});",
							"",
							"",
							"pm.test(\"Content-Type is present\", function () {",
							"    assert.isDefined(pm.response.headers.get(\"Content-Type\"));",
							"});",
							"",
							"pm.test(\"Date is present\", function () {",
							"    assert.isDefined(pm.response.headers.get(\"Date\"));",
							"});",
							"",
							"pm.test(\"Content-Encoding is present\", function () {",
							"    assert.isDefined(pm.response.headers.get(\"Content-Encoding\"));",
							"});",
							"",
							"pm.test(\"response is JSON\", function () {",
							"    assert.exists(jsonData);",
							"});",
							"",
							"",
							"if(currentAmountOfTasks < pm.environment.get('targetNumberOfTasks')) {",
							"    console.log('Not enough tasks');",
							"    console.log('currentAmountOfTasks: ' + currentAmountOfTasks + ' < ' + 'targetNumberOfTasks: ' + pm.environment.get('targetNumberOfTasks'));",
							"    postman.setNextRequest('create a task')",
							"} else {",
							"    console.log('Task list is full');",
							"    console.log('currentAmountOfTasks: ' + currentAmountOfTasks + ' >= ' + 'targetNumberOfTasks: ' + pm.environment.get('targetNumberOfTasks'));",
							"    pm.environment.set('lastID', jsonData[currentAmountOfTasks-1].id);",
							"    ids.push(pm.environment.get('lastID'))",
							"    //pm.environment.set(\"ids\", ids)",
							"    postman.setNextRequest('change task text');",
							"    ",
							"    }",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "488ca313-6cf6-4796-979d-0a32bade6e80",
						"exec": [
							"console.log('getting task list');\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "f3b18cc7-611b-4239-9e62-c2ee1caf5146",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "*/*"
					},
					{
						"key": "Authorization",
						"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDY1MTA3OCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDA1NjQ2Nzh9.vIN53s5RHi0_NuFKchJ3Wxi3ajjjtTt_0X_qJSYtFti7Xw4Veqy9jEpRervasFgwCyrZGihIehGmwaUXLYIaFg"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/tasks?page=0&size=500",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"tasks"
					],
					"query": [
						{
							"key": "page",
							"value": "0"
						},
						{
							"key": "size",
							"value": "500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "create a task",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "702e1346-b3c0-4eed-8b3d-231e811e1359",
						"exec": [
							"console.log('creating new task');",
							"let assert = require('chai').assert;",
							"let jsonData = pm.response.json();",
							"const ids = pm.environment.get(\"ids\")",
							"",
							"pm.test(\"response is JSON\", function () {",
							"    assert.exists(jsonData);",
							"});",
							"",
							"pm.test(\"Content-Type is present\", function () {",
							"    assert.isDefined(pm.response.headers.get(\"Content-Type\"));",
							"});",
							"",
							"pm.test(\"Date is present\", function () {",
							"    assert.isDefined(pm.response.headers.get(\"Date\"));",
							"});",
							"",
							"pm.test(\"Content-Encoding is present\", function () {",
							"    assert.isDefined(pm.response.headers.get(\"Content-Encoding\"));",
							"});",
							"",
							"pm.test(\"Status code is 201\", function () {",
							"    assert.equal(pm.response.code,'201');",
							"});",
							"",
							"console.log(\"jsonData.id is \" + jsonData.id)",
							"ids.push(jsonData.id)",
							"console.log(ids)",
							"pm.environment.set(\"ids\", ids)",
							"",
							"pm.environment.set('lastID', jsonData.id)",
							"",
							"let currentAmountOfTasks = pm.environment.get(\"currentAmountOfTasks\");",
							"currentAmountOfTasks++;",
							"pm.environment.set('currentAmountOfTasks', currentAmountOfTasks)",
							"",
							"if(currentAmountOfTasks < pm.environment.get('targetNumberOfTasks')) {",
							"    console.log('Not enough tasks');",
							"    postman.setNextRequest(\"create a task\")",
							"} else {",
							"    console.log('Task list is full');",
							"    postman.setNextRequest('change task text')",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "cb1ea16f-39ba-48b1-ac4f-43ac5da6a52b",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "accept",
						"value": "*/*"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDY1MTA3OCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDA1NjQ2Nzh9.vIN53s5RHi0_NuFKchJ3Wxi3ajjjtTt_0X_qJSYtFti7Xw4Veqy9jEpRervasFgwCyrZGihIehGmwaUXLYIaFg"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"text\": \"some text\",\n  \"answer\": \"string\",\n  \"title\": \"string\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/tasks",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"tasks"
					]
				}
			},
			"response": []
		},
		{
			"name": "change task text",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "d2668b63-12a0-457b-ae15-7e2cfb120637",
						"exec": [
							"console.log('changing task text')\r",
							"\r",
							"pm.collectionVariables.set('taskTextUpdated', 'new task text');\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "dd667542-c47c-4b54-b1c2-2294e6cbf58b",
						"exec": [
							"let assert = require('chai').assert;\r",
							"let jsonData = pm.response.json();\r",
							"let taskTextUpdated = pm.collectionVariables.get('taskTextUpdated')\r",
							"let lastID = pm.environment.get('lastID')\r",
							"\r",
							"pm.test(\"response is JSON\", function () {\r",
							"   assert.exists(jsonData);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    assert.isDefined(pm.response.headers.get(\"Content-Type\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Date is present\", function () {\r",
							"    assert.isDefined(pm.response.headers.get(\"Date\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Encoding is present\", function () {\r",
							"    assert.isDefined(pm.response.headers.get(\"Content-Encoding\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    assert.equal(pm.response.code, '200');\r",
							"});\r",
							"\r",
							"pm.test(\"Updated text in response is correct\", function () {\r",
							"    assert.equal(jsonData.id, lastID)\r",
							"    assert.equal(jsonData.text, taskTextUpdated);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "90e2a815-ff23-4a49-a2ad-a6a55b59e3d7",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "accept",
						"value": "*/*"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDY1MTA3OCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDA1NjQ2Nzh9.vIN53s5RHi0_NuFKchJ3Wxi3ajjjtTt_0X_qJSYtFti7Xw4Veqy9jEpRervasFgwCyrZGihIehGmwaUXLYIaFg"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\": \"{{lastID}}\",\n  \"text\": \"{{taskTextUpdated}}\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/tasks/{{lastID}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"tasks",
						"{{lastID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get task data",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "768eb36e-600b-4e1b-9d4e-8693255f7c37",
						"exec": [
							"let assert = require('chai').assert;",
							"let arr = pm.environment.get('ids')",
							"let jsonData = pm.response.json();",
							"let taskTextUpdated = pm.collectionVariables.get('taskTextUpdated')",
							"let lastID = pm.environment.get('lastID')",
							"",
							"pm.test(\"response is JSON\", function () {",
							"    assert.exists(jsonData);",
							"});",
							"",
							"pm.test(\"Content-Type is present\", function () {",
							"    assert.isDefined(pm.response.headers.get(\"Content-Type\"));",
							"});",
							"",
							"pm.test(\"Date is present\", function () {",
							"    assert.isDefined(pm.response.headers.get(\"Date\"));",
							"});",
							"",
							"pm.test(\"Content-Encoding is present\", function () {",
							"    assert.isDefined(pm.response.headers.get(\"Content-Encoding\"));",
							"});",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    assert.equal(pm.response.code, '200');",
							"});",
							"",
							"pm.test(\"Updated text in response is correct\", function () {",
							"    assert.equal(jsonData.id, lastID)",
							"    assert.equal(jsonData.text, taskTextUpdated);",
							"});",
							"",
							"// if(arr){arr.forEach((id)=>{",
							"//     console.log('deleting task')",
							"//     pm.sendRequest(",
							"//         {url: `${pm.environment.get('baseUrl')}/tasks/${id}`,",
							"//         method: 'DELETE',",
							"//         header:",
							"//         {'Authorization': 'Bearer ' + pm.environment.get('token'),",
							"//         'accept': '*/*'}",
							"//         }",
							"//         , function (err, response) {",
							"//         console.log(response);",
							"//     });",
							"// })",
							"// }",
							"",
							"// console.log('unsetting variables');",
							"// pm.environment.unset('token');",
							"// pm.environment.unset('ids');",
							"// pm.environment.unset('lastID');",
							"// pm.environment.unset('currentAmountOfTasks');",
							"",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "18ab2f21-1004-4cf3-9d1a-f46ec2d8c1a1",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "*/*"
					},
					{
						"key": "Authorization",
						"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDY1MTA3OCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDA1NjQ2Nzh9.vIN53s5RHi0_NuFKchJ3Wxi3ajjjtTt_0X_qJSYtFti7Xw4Veqy9jEpRervasFgwCyrZGihIehGmwaUXLYIaFg"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/tasks/{{lastID}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"tasks",
						"{{lastID}}"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "29c4306a-99c0-4770-b9b4-ae0a7e07659f",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "da81ad2a-108e-4cb3-a280-20d74e10aef6",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "1c2a312b-80b0-4676-a59c-f86a49cfe3d3",
			"key": "taskTextUpdated",
			"value": ""
		}
	]
}