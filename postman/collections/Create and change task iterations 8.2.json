{
	"info": {
		"_postman_id": "06789067-8f7c-413d-b549-e7ceb94c6e09",
		"name": "Create and change task iterations 8.2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "27247429-06789067-8f7c-413d-b549-e7ceb94c6e09"
	},
	"item": [
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "dfd5a33a-611d-47ca-9344-0675460f74a1",
						"exec": [
							"let assert = require('chai').assert;",
							"let jsonData = pm.response.json();",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    assert.equal(pm.response.code,'200');",
							"});",
							"",
							"",
							"pm.test(\"response is JSON\", function () {",
							"    assert.exists(jsonData);",
							"});",
							"",
							"",
							"pm.environment.set('token', jsonData.id_token)",
							"",
							"",
							"pm.test(\"Response includes a valid JWT token and token has the correct structure (header, payload, signature)\", function () {",
							"",
							"    pm.expect(jsonData.id_token).to.be.a('string');",
							"    pm.expect(jsonData.id_token).to.match(/^[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+$/);",
							"});",
							"",
							"",
							"pm.test(\"Token expiration time is in the future\", function () {",
							"    ",
							"    pm.expect(jsonData.id_token).to.exist;",
							"    ",
							"    const tokenPayload = jsonData.id_token.split('.')[1];",
							"    const decodedTokenPayload = Buffer.from(tokenPayload, 'base64').toString('utf-8');",
							"    const tokenData = JSON.parse(decodedTokenPayload);",
							"    ",
							"    pm.expect(tokenData.exp * 1000).to.be.above(new Date().getTime());",
							"});",
							"",
							"",
							"pm.test(\"Token has the expected claims\", function () {",
							"",
							"    pm.expect(jsonData.id_token).to.exist;",
							"",
							"    const tokenParts = jsonData.id_token.split('.');",
							"",
							"    pm.expect(tokenParts).to.have.lengthOf(3, \"Token should consist of three parts\");",
							"",
							"    const decodedToken = JSON.parse(atob(tokenParts[1]));",
							"",
							"    pm.expect(decodedToken).to.have.property('sub');",
							"    pm.expect(decodedToken).to.have.property('exp');",
							"    pm.expect(decodedToken).to.have.property('iat');",
							"});",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "4523f7bf-488e-4792-954e-ebef090a41ec",
						"exec": [
							"console.log('login');\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "e3ed5948-ddb2-47d7-81f7-8e67d5cdc78f",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json, text/plain, */*"
					},
					{
						"key": "Accept-Language",
						"value": "en-US,en;q=0.9,it-IT;q=0.8,it;q=0.7,fr-FR;q=0.6,fr;q=0.5,de-DE;q=0.4,de;q=0.3,ru;q=0.2"
					},
					{
						"key": "Connection",
						"value": "keep-alive"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Origin",
						"value": "https://sqlverifier-50d286d70656.herokuapp.com"
					},
					{
						"key": "Referer",
						"value": "https://sqlverifier-50d286d70656.herokuapp.com/login"
					},
					{
						"key": "Sec-Fetch-Dest",
						"value": "empty"
					},
					{
						"key": "Sec-Fetch-Mode",
						"value": "cors"
					},
					{
						"key": "Sec-Fetch-Site",
						"value": "same-origin"
					},
					{
						"key": "User-Agent",
						"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36"
					},
					{
						"key": "sec-ch-ua",
						"value": "\"Google Chrome\";v=\"119\", \"Chromium\";v=\"119\", \"Not?A_Brand\";v=\"24\""
					},
					{
						"key": "sec-ch-ua-mobile",
						"value": "?0"
					},
					{
						"key": "sec-ch-ua-platform",
						"value": "\"macOS\""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"username\":\"{{adminLogin}}\",\"password\":\"{{adminPassword}}\",\"rememberMe\":false}"
				},
				"url": {
					"raw": "{{baseUrl}}/authenticate",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"authenticate"
					]
				}
			},
			"response": [
				{
					"id": "a84f7ab5-5e7d-466c-ae54-b1c6f8955a23",
					"name": "login 200",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "Accept-Language",
								"value": "en-US,en;q=0.9,it-IT;q=0.8,it;q=0.7,fr-FR;q=0.6,fr;q=0.5,de-DE;q=0.4,de;q=0.3,ru;q=0.2"
							},
							{
								"key": "Connection",
								"value": "keep-alive"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Origin",
								"value": "https://sqlverifier-50d286d70656.herokuapp.com"
							},
							{
								"key": "Referer",
								"value": "https://sqlverifier-50d286d70656.herokuapp.com/login"
							},
							{
								"key": "Sec-Fetch-Dest",
								"value": "empty"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "cors"
							},
							{
								"key": "Sec-Fetch-Site",
								"value": "same-origin"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Google Chrome\";v=\"119\", \"Chromium\";v=\"119\", \"Not?A_Brand\";v=\"24\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"macOS\""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"username\":\"{{adminLogin}}\",\"password\":\"{{adminPassword}}\",\"rememberMe\":false}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/authenticate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"authenticate"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"name": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\"id_token\":\"eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJvbGdhX3N1IiwiZXhwIjoxNzAzNTI1ODAxLCJhdXRoIjoiUk9MRV9BRE1JTiIsImlhdCI6MTcwMzQzOTQwMX0.jqDkiYXX2LGwcNf7asePF44BQqfCZlbg5gigAziWwFV7zta1lrdlVwf_rw4_H1Wgd872K5WIW1MEZwAbDoxlBg\"}"
				},
				{
					"id": "be692345-9f5c-4bc9-b94e-500d2a10d883",
					"name": "login - no username 400",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "Accept-Language",
								"value": "en-US,en;q=0.9,it-IT;q=0.8,it;q=0.7,fr-FR;q=0.6,fr;q=0.5,de-DE;q=0.4,de;q=0.3,ru;q=0.2"
							},
							{
								"key": "Connection",
								"value": "keep-alive"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Origin",
								"value": "https://sqlverifier-50d286d70656.herokuapp.com"
							},
							{
								"key": "Referer",
								"value": "https://sqlverifier-50d286d70656.herokuapp.com/login"
							},
							{
								"key": "Sec-Fetch-Dest",
								"value": "empty"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "cors"
							},
							{
								"key": "Sec-Fetch-Site",
								"value": "same-origin"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Google Chrome\";v=\"119\", \"Chromium\";v=\"119\", \"Not?A_Brand\";v=\"24\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"macOS\""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"\",\r\n    \"password\": \"{{adminPassword}}\",\r\n    \"rememberMe\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/authenticate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"authenticate"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"name": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\"error\":\"Username and password are required\"}"
				},
				{
					"id": "0defe1c5-744e-4a8b-ac7f-0db526d3e000",
					"name": "login - no password 400",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "Accept-Language",
								"value": "en-US,en;q=0.9,it-IT;q=0.8,it;q=0.7,fr-FR;q=0.6,fr;q=0.5,de-DE;q=0.4,de;q=0.3,ru;q=0.2"
							},
							{
								"key": "Connection",
								"value": "keep-alive"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Origin",
								"value": "https://sqlverifier-50d286d70656.herokuapp.com"
							},
							{
								"key": "Referer",
								"value": "https://sqlverifier-50d286d70656.herokuapp.com/login"
							},
							{
								"key": "Sec-Fetch-Dest",
								"value": "empty"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "cors"
							},
							{
								"key": "Sec-Fetch-Site",
								"value": "same-origin"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Google Chrome\";v=\"119\", \"Chromium\";v=\"119\", \"Not?A_Brand\";v=\"24\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"macOS\""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{adminLogin}}\",\r\n    \"password\": \"\",\r\n    \"rememberMe\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/authenticate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"authenticate"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"name": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\"error\":\"Username and password are required\"}"
				}
			]
		},
		{
			"name": "get tasks list",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "79ee9909-c558-4c54-9763-5902e8f872a0",
						"exec": [
							"let jsonData = pm.response.json();",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Content-Type is present\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.exist;",
							"});",
							"",
							"pm.test(\"Date is present\", function () {",
							"    pm.expect(pm.response.headers.get(\"Date\")).to.exist;",
							"});",
							"",
							"pm.test(\"Content-Encoding is present\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Encoding\")).to.exist;",
							"});",
							"",
							"pm.test(\"Response is JSON\", function () {",
							"    pm.expect(jsonData).to.exist;",
							"});",
							"",
							"pm.test(\"Response has the required fields - id, text, answer, and title\", function () {",
							"    pm.expect(jsonData).to.be.an('array');",
							"    jsonData.forEach(function(task) {",
							"        pm.expect(task).to.have.property('id');",
							"        pm.expect(task).to.have.property('text');",
							"        pm.expect(task).to.have.property('answer');",
							"        pm.expect(task).to.have.property('title');",
							"    });",
							"});",
							"",
							"pm.test(\"Each task object has a unique and non-empty id\", function () {",
							"    pm.expect(jsonData).to.be.an('array');",
							"    jsonData.forEach(function(task) {",
							"        pm.expect(task.id).to.exist; ",
							"        pm.expect(task.id).to.be.a('number');",
							"    });",
							"});",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "289e62c6-97aa-4318-a24d-33301a8f0ddc",
						"exec": [
							"console.log('getting task list');\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "63ffca08-2005-4438-999b-79e4ca41c5b3",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "*/*"
					},
					{
						"key": "Authorization",
						"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDY1MTA3OCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDA1NjQ2Nzh9.vIN53s5RHi0_NuFKchJ3Wxi3ajjjtTt_0X_qJSYtFti7Xw4Veqy9jEpRervasFgwCyrZGihIehGmwaUXLYIaFg"
					},
					{
						"key": "x-mock-response-code",
						"value": "200",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/tasks?page=0&size=500",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"tasks"
					],
					"query": [
						{
							"key": "page",
							"value": "0"
						},
						{
							"key": "size",
							"value": "500"
						}
					]
				}
			},
			"response": [
				{
					"id": "165cc6c8-4368-4245-ad1c-5a6b110dd0dd",
					"name": "get tasks list 200",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDY1MTA3OCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDA1NjQ2Nzh9.vIN53s5RHi0_NuFKchJ3Wxi3ajjjtTt_0X_qJSYtFti7Xw4Veqy9jEpRervasFgwCyrZGihIehGmwaUXLYIaFg"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/tasks?page=0&size=500",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "500"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"name": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "[\r\n    {\r\n        \"id\": 1001,\r\n        \"text\": \"ttest \",\r\n        \"answer\": \"answer\",\r\n        \"title\": \"test task\"\r\n    },\r\n    {\r\n        \"id\": 1002,\r\n        \"text\": \"12\",\r\n        \"answer\": \"12\",\r\n        \"title\": \"12\"\r\n    }\r\n]"
				},
				{
					"id": "64c6fc6f-8ea5-432b-b417-999b40524cea",
					"name": "get tasks list 403",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/tasks?page=0&size=500",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "500"
								}
							]
						}
					},
					"status": "Forbidden",
					"code": 403,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"name": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\r\n    \"error\": \"Token not valid\"\r\n}"
				},
				{
					"id": "f28f7bd3-4fc1-43c8-9d29-66c7bd156670",
					"name": "get tasks list 401",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/tasks?page=0&size=500",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "500"
								}
							]
						}
					},
					"status": "Unauthorized",
					"code": 401,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"name": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\r\n    \"error\": \"Token not provided\"\r\n}"
				}
			]
		},
		{
			"name": "create a task",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f2d0e24b-58f0-4352-8f9a-243b3448f93e",
						"exec": [
							"console.log('creating new task');",
							"let assert = require('chai').assert;",
							"let jsonData = pm.response.json();",
							"const ids = pm.environment.get(\"ids\")",
							"",
							"pm.test(\"response is JSON\", function () {",
							"    assert.exists(jsonData);",
							"});",
							"",
							"pm.test(\"Content-Type is present\", function () {",
							"    assert.isDefined(pm.response.headers.get(\"Content-Type\"));",
							"});",
							"",
							"pm.test(\"Date is present\", function () {",
							"    assert.isDefined(pm.response.headers.get(\"Date\"));",
							"});",
							"",
							"pm.test(\"Content-Encoding is present\", function () {",
							"    assert.isDefined(pm.response.headers.get(\"Content-Encoding\"));",
							"});",
							"",
							"pm.test(\"Status code is 201\", function () {",
							"    assert.equal(pm.response.code,'201');",
							"});",
							"",
							"console.log(\"jsonData.id is \" + jsonData.id)",
							"ids.push(jsonData.id)",
							"console.log(ids)",
							"pm.environment.set(\"ids\", ids)",
							"",
							"pm.environment.set('lastID', jsonData.id)",
							"",
							"let currentAmountOfTasks = pm.environment.get(\"currentAmountOfTasks\");",
							"currentAmountOfTasks++;",
							"pm.environment.set('currentAmountOfTasks', currentAmountOfTasks)",
							"",
							"if(currentAmountOfTasks < pm.environment.get('targetNumberOfTasks')) {",
							"    console.log('Not enough tasks');",
							"    postman.setNextRequest(\"create a task\")",
							"} else {",
							"    console.log('Task list is full');",
							"    postman.setNextRequest('change task text')",
							"}",
							"",
							"pm.test(\"Response has the required fields - id, text, answer, and title\", function () {",
							"    ",
							"    pm.expect(jsonData).to.be.an('object');",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData).to.have.property('text');",
							"    pm.expect(jsonData).to.have.property('answer');",
							"    pm.expect(jsonData).to.have.property('title');",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"Id is a positive integer\", function () {",
							"    ",
							"    pm.expect(jsonData.id).to.be.a('number');",
							"    pm.expect(jsonData.id).to.be.greaterThan(0);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "a3de9de8-5ef4-4328-bc5a-0742fa0c7dcd",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "accept",
						"value": "*/*"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDY1MTA3OCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDA1NjQ2Nzh9.vIN53s5RHi0_NuFKchJ3Wxi3ajjjtTt_0X_qJSYtFti7Xw4Veqy9jEpRervasFgwCyrZGihIehGmwaUXLYIaFg"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"text\": \"some text\",\n  \"answer\": \"string\",\n  \"title\": \"string\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/tasks",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"tasks"
					]
				}
			},
			"response": [
				{
					"id": "61536392-d04c-4fe6-a782-5bc843d58c00",
					"name": "create a task 201",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDY1MTA3OCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDA1NjQ2Nzh9.vIN53s5RHi0_NuFKchJ3Wxi3ajjjtTt_0X_qJSYtFti7Xw4Veqy9jEpRervasFgwCyrZGihIehGmwaUXLYIaFg"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"text\": \"some text\",\n  \"answer\": \"string\",\n  \"title\": \"string\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tasks",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"name": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": {{$randomInt}},\n    \"text\": \"some text\",\n    \"answer\": \"string\",\n    \"title\": \"string\"\n}"
				},
				{
					"id": "cee6a397-3076-494f-9f92-b9a029d348c5",
					"name": "create a task - no title 400",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDY1MTA3OCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDA1NjQ2Nzh9.vIN53s5RHi0_NuFKchJ3Wxi3ajjjtTt_0X_qJSYtFti7Xw4Veqy9jEpRervasFgwCyrZGihIehGmwaUXLYIaFg"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"text\": \"some text\",\n  \"answer\": \"string\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tasks",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"name": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"error\": \"Required info is missing\"\n}"
				},
				{
					"id": "454382bb-7f81-47a4-9d44-02887fdddd65",
					"name": "create a task no answer 400",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDY1MTA3OCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDA1NjQ2Nzh9.vIN53s5RHi0_NuFKchJ3Wxi3ajjjtTt_0X_qJSYtFti7Xw4Veqy9jEpRervasFgwCyrZGihIehGmwaUXLYIaFg"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"text\": \"some text\",\n   \"title\": \"string\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tasks",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"name": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"error\": \"Required info is missing\"\n}"
				},
				{
					"id": "519d1c09-dc9d-4530-bf8c-40541fd34e24",
					"name": "create a task - no text 400",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDY1MTA3OCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDA1NjQ2Nzh9.vIN53s5RHi0_NuFKchJ3Wxi3ajjjtTt_0X_qJSYtFti7Xw4Veqy9jEpRervasFgwCyrZGihIehGmwaUXLYIaFg"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"answer\": \"string\",\n  \"title\": \"string\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tasks",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"name": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": {{$randomInt}},\n    \"text\": \"some text\",\n    \"answer\": \"string\",\n    \"title\": \"string\"\n}"
				}
			]
		},
		{
			"name": "change task text",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "a277d280-2d2d-43f0-9d0c-6a889eada595",
						"exec": [
							"console.log('changing task text')\r",
							"\r",
							"pm.collectionVariables.set('taskTextUpdated', 'new task text');\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "b146fb78-0379-4063-a9a2-93f597a9f62e",
						"exec": [
							"let assert = require('chai').assert;\r",
							"let jsonData = pm.response.json();\r",
							"let taskTextUpdated = pm.collectionVariables.get('taskTextUpdated')\r",
							"let lastID = pm.environment.get('lastID')\r",
							"\r",
							"pm.test(\"response is JSON\", function () {\r",
							"   assert.exists(jsonData);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    assert.isDefined(pm.response.headers.get(\"Content-Type\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Date is present\", function () {\r",
							"    assert.isDefined(pm.response.headers.get(\"Date\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Encoding is present\", function () {\r",
							"    assert.isDefined(pm.response.headers.get(\"Content-Encoding\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    assert.equal(pm.response.code, '200');\r",
							"});\r",
							"\r",
							"pm.test(\"Updated text in response is correct\", function () {\r",
							"    assert.equal(jsonData.id, lastID)\r",
							"    assert.equal(jsonData.text, taskTextUpdated);\r",
							"});\r",
							"pm.test(\"Response contains the required fields\", function () {\r",
							"   \r",
							"    pm.expect(jsonData).to.be.an('object');\r",
							"    pm.expect(jsonData.id).to.exist;\r",
							"    pm.expect(jsonData.text).to.exist;\r",
							"    pm.expect(jsonData.answer).to.exist;\r",
							"    pm.expect(jsonData.title).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id in the response matches the lastID used in the request\", function () {\r",
							"    const lastID = pm.variables.get(\"lastID\");\r",
							"    \r",
							"    pm.expect(jsonData).to.have.property('id').that.is.equal(lastID);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Title is a non-empty string\", function () {\r",
							"    \r",
							"    pm.expect(jsonData).to.be.an('object');\r",
							"    pm.expect(jsonData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Answer is a string\", function () {\r",
							"    \r",
							"    pm.expect(jsonData.answer).to.be.a('string');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has a valid Content-Type header\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "0b5c6568-b544-4a81-ad6e-2ffa367c3968",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "accept",
						"value": "*/*"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDY1MTA3OCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDA1NjQ2Nzh9.vIN53s5RHi0_NuFKchJ3Wxi3ajjjtTt_0X_qJSYtFti7Xw4Veqy9jEpRervasFgwCyrZGihIehGmwaUXLYIaFg"
					},
					{
						"key": "x-mock-response-code",
						"value": "200",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\": \"{{lastID}}\",\n  \"text\": \"update text\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/tasks/{{lastID}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"tasks",
						"{{lastID}}"
					]
				}
			},
			"response": [
				{
					"id": "bd8b9db1-fb7e-49b3-a709-274a1254d5d6",
					"name": "change task text 200",
					"originalRequest": {
						"method": "PATCH",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDY1MTA3OCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDA1NjQ2Nzh9.vIN53s5RHi0_NuFKchJ3Wxi3ajjjtTt_0X_qJSYtFti7Xw4Veqy9jEpRervasFgwCyrZGihIehGmwaUXLYIaFg"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{lastID}}\",\n  \"text\": \"update text\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tasks/{{lastID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks",
								"{{lastID}}"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"name": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": {{$body 'id'}},\n    \"text\": \"update text\",\n    \"answer\": \"string\",\n    \"title\": \"string\"\n}"
				},
				{
					"id": "5d8d5802-e73f-45e4-a498-fbfaa10080e5",
					"name": "change task text - empty id 400",
					"originalRequest": {
						"method": "PATCH",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDY1MTA3OCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDA1NjQ2Nzh9.vIN53s5RHi0_NuFKchJ3Wxi3ajjjtTt_0X_qJSYtFti7Xw4Veqy9jEpRervasFgwCyrZGihIehGmwaUXLYIaFg"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"\",\n  \"text\": \"update text\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tasks/{{lastID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks",
								"{{lastID}}"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"name": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"error\": \"Required info is missing\"\n}"
				},
				{
					"id": "c9d53802-10f2-433a-9661-3c8ba84f6495",
					"name": "change task text - empty text 400",
					"originalRequest": {
						"method": "PATCH",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDY1MTA3OCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDA1NjQ2Nzh9.vIN53s5RHi0_NuFKchJ3Wxi3ajjjtTt_0X_qJSYtFti7Xw4Veqy9jEpRervasFgwCyrZGihIehGmwaUXLYIaFg"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{lastID}}\",\n  \"text\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tasks/{{lastID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks",
								"{{lastID}}"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"name": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"error\": \"Required info is missing\"\n}"
				}
			]
		},
		{
			"name": "get task data",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "60f77691-a764-4847-9b63-3827613e2dfa",
						"exec": [
							"let assert = require('chai').assert;",
							"let arr = pm.environment.get('ids')",
							"let jsonData = pm.response.json();",
							"let taskTextUpdated = pm.collectionVariables.get('taskTextUpdated')",
							"let lastID = pm.environment.get('lastID')",
							"",
							"pm.test(\"response is JSON\", function () {",
							"    assert.exists(jsonData);",
							"});",
							"",
							"pm.test(\"Content-Type is present\", function () {",
							"    assert.isDefined(pm.response.headers.get(\"Content-Type\"));",
							"});",
							"",
							"pm.test(\"Date is present\", function () {",
							"    assert.isDefined(pm.response.headers.get(\"Date\"));",
							"});",
							"",
							"pm.test(\"Content-Encoding is present\", function () {",
							"    assert.isDefined(pm.response.headers.get(\"Content-Encoding\"));",
							"});",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    assert.equal(pm.response.code, '200');",
							"});",
							"",
							"pm.test(\"Updated text in response is correct\", function () {",
							"    assert.equal(jsonData.id, lastID)",
							"    assert.equal(jsonData.text, taskTextUpdated);",
							"});",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"",
							"    pm.expect(jsonData).to.be.an('object');",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData).to.have.property('text');",
							"    pm.expect(jsonData).to.have.property('answer');",
							"    pm.expect(jsonData).to.have.property('title');",
							"});",
							"",
							"",
							"pm.test(\"ID is a non-negative integer\", function () {",
							"    ",
							"    pm.expect(jsonData.id).to.be.a('number');",
							"    pm.expect(jsonData.id).to.be.at.least(0);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Validate the Date header is in a valid date format\", function () {",
							"    const dateHeader = pm.response.headers.get(\"Date\");",
							"    pm.expect(dateHeader).to.match(/^\\w{3}, \\d{2} \\w{3} \\d{4} \\d{2}:\\d{2}:\\d{2} \\w{3}$/);",
							"});",
							"",
							"if(arr){arr.forEach((id)=>{",
							"    console.log('deleting task')",
							"    pm.sendRequest(",
							"        {url: `${pm.environment.get('baseUrl')}/tasks/${id}`,",
							"        method: 'DELETE',",
							"        header:",
							"        {'Authorization': 'Bearer ' + pm.environment.get('token'),",
							"        'accept': '*/*'}",
							"        }",
							"        , function (err, response) {",
							"        console.log(response);",
							"    });",
							"})",
							"}",
							"",
							"console.log('unsetting variables');",
							"pm.environment.unset('token');",
							"pm.environment.unset('ids');",
							"pm.environment.unset('lastID');",
							"pm.environment.unset('currentAmountOfTasks');",
							"pm.collectionVariables.unset('taskTextUpdated'); "
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "60ca03e7-d74a-4cd6-a4a1-6bd2ec175b60",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "*/*"
					},
					{
						"key": "Authorization",
						"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDY1MTA3OCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDA1NjQ2Nzh9.vIN53s5RHi0_NuFKchJ3Wxi3ajjjtTt_0X_qJSYtFti7Xw4Veqy9jEpRervasFgwCyrZGihIehGmwaUXLYIaFg"
					},
					{
						"key": "x-mock-response-code",
						"value": "401",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{baseUrl}}/tasks/{{lastID}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"tasks",
						"{{lastID}}"
					]
				}
			},
			"response": [
				{
					"id": "e9dc14f6-b090-4b3c-9dd7-8c23b8f365fd",
					"name": "get task data  200",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDY1MTA3OCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDA1NjQ2Nzh9.vIN53s5RHi0_NuFKchJ3Wxi3ajjjtTt_0X_qJSYtFti7Xw4Veqy9jEpRervasFgwCyrZGihIehGmwaUXLYIaFg"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/tasks/{{lastID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks",
								"{{lastID}}"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"name": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\r\n    \"id\": {{$pathSegments '1'}},\r\n    \"text\": \"update text\",\r\n    \"answer\": \"string\",\r\n    \"title\": \"string\"\r\n}"
				},
				{
					"id": "bbc07379-8204-4207-9c62-f3dda24ea771",
					"name": "get task data 403",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDY1MTA3OCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDA1NjQ2Nzh9.vIN53s5RHi0_NuFKchJ3Wxi3ajjjtTt_0X_qJSYtFti7Xw4Veqy9jEpRervasFgwCyrZGihIehGmwaUXLYIaFg"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/tasks/{{lastID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks",
								"{{lastID}}"
							]
						}
					},
					"status": "Forbidden",
					"code": 403,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"name": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\r\n    \"error\": \"Token not valid\"\r\n}"
				},
				{
					"id": "0c4aa888-6e40-4d54-839b-2236514ab4f0",
					"name": "get task data 401",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDY1MTA3OCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDA1NjQ2Nzh9.vIN53s5RHi0_NuFKchJ3Wxi3ajjjtTt_0X_qJSYtFti7Xw4Veqy9jEpRervasFgwCyrZGihIehGmwaUXLYIaFg"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/tasks/{{lastID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks",
								"{{lastID}}"
							]
						}
					},
					"status": "Unauthorized",
					"code": 401,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"name": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\r\n    \"error\": \"Token not provided\"\r\n}"
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "b81bcd56-a2e6-42ad-ab79-507bb26e19a8",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "cde9e61e-2307-4a9f-a033-31d0ba503c4a",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "0ffa65f1-a52f-49a8-bcf9-b62c7f72e9ff",
			"key": "taskTextUpdated",
			"value": ""
		}
	]
}