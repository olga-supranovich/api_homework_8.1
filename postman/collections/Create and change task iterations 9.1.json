{
	"info": {
		"_postman_id": "e5284d50-796d-45a0-abfa-09a51334599d",
		"name": "Create and change task iterations 9.1",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "27247429-e5284d50-796d-45a0-abfa-09a51334599d"
	},
	"item": [
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4a3f172e-25f8-4bc1-9201-561b76661753",
						"exec": [
							"let assert = require('chai').assert;",
							"let jsonData = pm.response.json();",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    assert.equal(pm.response.code,'200');",
							"});",
							"",
							"",
							"pm.test(\"response is JSON\", function () {",
							"    assert.exists(jsonData);",
							"});",
							"",
							"",
							"pm.environment.set('token', jsonData.id_token)",
							"",
							"",
							"pm.test(\"Response includes a valid JWT token and token has the correct structure (header, payload, signature)\", function () {",
							"",
							"    pm.expect(jsonData.id_token).to.be.a('string');",
							"    pm.expect(jsonData.id_token).to.match(/^[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+$/);",
							"});",
							"",
							"",
							"pm.test(\"Token expiration time is in the future\", function () {",
							"    ",
							"    pm.expect(jsonData.id_token).to.exist;",
							"    ",
							"    const tokenPayload = jsonData.id_token.split('.')[1];",
							"    const decodedTokenPayload = Buffer.from(tokenPayload, 'base64').toString('utf-8');",
							"    const tokenData = JSON.parse(decodedTokenPayload);",
							"    ",
							"    pm.expect(tokenData.exp * 1000).to.be.above(new Date().getTime());",
							"});",
							"",
							"",
							"pm.test(\"Token has the expected claims\", function () {",
							"",
							"    pm.expect(jsonData.id_token).to.exist;",
							"",
							"    const tokenParts = jsonData.id_token.split('.');",
							"",
							"    pm.expect(tokenParts).to.have.lengthOf(3, \"Token should consist of three parts\");",
							"",
							"    const decodedToken = JSON.parse(atob(tokenParts[1]));",
							"",
							"    pm.expect(decodedToken).to.have.property('sub');",
							"    pm.expect(decodedToken).to.have.property('exp');",
							"    pm.expect(decodedToken).to.have.property('iat');",
							"});",
							"",
							"let schema = {",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
							"  \"type\": \"object\",",
							"  \"properties\": {",
							"    \"id_token\": {",
							"      \"type\": \"string\"",
							"    }",
							"  },",
							"  \"required\": [\"id_token\"]",
							"}",
							"",
							"pm.test('JSON schema for response is correct', () => {",
							"  pm.response.to.have.jsonSchema (schema);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "24325fd9-a7f2-4636-894f-3aee585dde7e",
						"exec": [
							"console.log('login');\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "a2fca911-5a6f-4d76-a07a-d073ab6fbe57",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json, text/plain, */*"
					},
					{
						"key": "Accept-Language",
						"value": "en-US,en;q=0.9,it-IT;q=0.8,it;q=0.7,fr-FR;q=0.6,fr;q=0.5,de-DE;q=0.4,de;q=0.3,ru;q=0.2"
					},
					{
						"key": "Connection",
						"value": "keep-alive"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Origin",
						"value": "https://sqlverifier-50d286d70656.herokuapp.com"
					},
					{
						"key": "Referer",
						"value": "https://sqlverifier-50d286d70656.herokuapp.com/login"
					},
					{
						"key": "Sec-Fetch-Dest",
						"value": "empty"
					},
					{
						"key": "Sec-Fetch-Mode",
						"value": "cors"
					},
					{
						"key": "Sec-Fetch-Site",
						"value": "same-origin"
					},
					{
						"key": "User-Agent",
						"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36"
					},
					{
						"key": "sec-ch-ua",
						"value": "\"Google Chrome\";v=\"119\", \"Chromium\";v=\"119\", \"Not?A_Brand\";v=\"24\""
					},
					{
						"key": "sec-ch-ua-mobile",
						"value": "?0"
					},
					{
						"key": "sec-ch-ua-platform",
						"value": "\"macOS\""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"username\":\"{{adminLogin}}\",\"password\":\"{{adminPassword}}\",\"rememberMe\":false}"
				},
				"url": {
					"raw": "{{baseUrl}}/authenticate",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"authenticate"
					]
				}
			},
			"response": [
				{
					"id": "e8c218e4-6f1e-4057-bddf-58f6c02ab7bf",
					"name": "login 200",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "Accept-Language",
								"value": "en-US,en;q=0.9,it-IT;q=0.8,it;q=0.7,fr-FR;q=0.6,fr;q=0.5,de-DE;q=0.4,de;q=0.3,ru;q=0.2"
							},
							{
								"key": "Connection",
								"value": "keep-alive"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Origin",
								"value": "https://sqlverifier-50d286d70656.herokuapp.com"
							},
							{
								"key": "Referer",
								"value": "https://sqlverifier-50d286d70656.herokuapp.com/login"
							},
							{
								"key": "Sec-Fetch-Dest",
								"value": "empty"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "cors"
							},
							{
								"key": "Sec-Fetch-Site",
								"value": "same-origin"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Google Chrome\";v=\"119\", \"Chromium\";v=\"119\", \"Not?A_Brand\";v=\"24\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"macOS\""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"username\":\"{{adminLogin}}\",\"password\":\"{{adminPassword}}\",\"rememberMe\":false}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/authenticate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"authenticate"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"name": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\"id_token\":\"eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJvbGdhX3N1IiwiZXhwIjoxNzAzNTI1ODAxLCJhdXRoIjoiUk9MRV9BRE1JTiIsImlhdCI6MTcwMzQzOTQwMX0.jqDkiYXX2LGwcNf7asePF44BQqfCZlbg5gigAziWwFV7zta1lrdlVwf_rw4_H1Wgd872K5WIW1MEZwAbDoxlBg\"}"
				},
				{
					"id": "7d86ed32-88f6-49fa-9b85-ca5b2f4b4ef1",
					"name": "login - no username 400",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "Accept-Language",
								"value": "en-US,en;q=0.9,it-IT;q=0.8,it;q=0.7,fr-FR;q=0.6,fr;q=0.5,de-DE;q=0.4,de;q=0.3,ru;q=0.2"
							},
							{
								"key": "Connection",
								"value": "keep-alive"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Origin",
								"value": "https://sqlverifier-50d286d70656.herokuapp.com"
							},
							{
								"key": "Referer",
								"value": "https://sqlverifier-50d286d70656.herokuapp.com/login"
							},
							{
								"key": "Sec-Fetch-Dest",
								"value": "empty"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "cors"
							},
							{
								"key": "Sec-Fetch-Site",
								"value": "same-origin"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Google Chrome\";v=\"119\", \"Chromium\";v=\"119\", \"Not?A_Brand\";v=\"24\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"macOS\""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"\",\r\n    \"password\": \"{{adminPassword}}\",\r\n    \"rememberMe\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/authenticate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"authenticate"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"name": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\"error\":\"Username and password are required\"}"
				},
				{
					"id": "6d3f06a1-7701-4d35-a586-edd1bd20d92d",
					"name": "login - no password 400",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "Accept-Language",
								"value": "en-US,en;q=0.9,it-IT;q=0.8,it;q=0.7,fr-FR;q=0.6,fr;q=0.5,de-DE;q=0.4,de;q=0.3,ru;q=0.2"
							},
							{
								"key": "Connection",
								"value": "keep-alive"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Origin",
								"value": "https://sqlverifier-50d286d70656.herokuapp.com"
							},
							{
								"key": "Referer",
								"value": "https://sqlverifier-50d286d70656.herokuapp.com/login"
							},
							{
								"key": "Sec-Fetch-Dest",
								"value": "empty"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "cors"
							},
							{
								"key": "Sec-Fetch-Site",
								"value": "same-origin"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Google Chrome\";v=\"119\", \"Chromium\";v=\"119\", \"Not?A_Brand\";v=\"24\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"macOS\""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{adminLogin}}\",\r\n    \"password\": \"\",\r\n    \"rememberMe\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/authenticate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"authenticate"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"name": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\"error\":\"Username and password are required\"}"
				}
			]
		},
		{
			"name": "get tasks list",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "aa1cffd8-5d0b-46ab-97bb-9cccc8ab91f4",
						"exec": [
							"let assert = require('chai').assert",
							"let jsonData = pm.response.json();",
							"let currentAmountOfTasks = jsonData.length;",
							"const ids = pm.environment.get(\"ids\") || [];",
							"console.log(currentAmountOfTasks)",
							"",
							"pm.environment.set('currentAmountOfTasks', currentAmountOfTasks)",
							"pm.environment.set(\"ids\", ids)",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Content-Type is present\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.exist;",
							"});",
							"",
							"pm.test(\"Date is present\", function () {",
							"    pm.expect(pm.response.headers.get(\"Date\")).to.exist;",
							"});",
							"",
							"pm.test(\"Content-Encoding is present\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Encoding\")).to.exist;",
							"});",
							"",
							"pm.test(\"Response is JSON\", function () {",
							"    pm.expect(jsonData).to.exist;",
							"});",
							"",
							"pm.test(\"Response has the required fields - id, text, answer, and title\", function () {",
							"    pm.expect(jsonData).to.be.an('array');",
							"    jsonData.forEach(function(task) {",
							"        pm.expect(task).to.have.property('id');",
							"        pm.expect(task).to.have.property('text');",
							"        pm.expect(task).to.have.property('answer');",
							"        pm.expect(task).to.have.property('title');",
							"    });",
							"});",
							"",
							"pm.test(\"Each task object has a unique and non-empty id\", function () {",
							"    pm.expect(jsonData).to.be.an('array');",
							"    jsonData.forEach(function(task) {",
							"        pm.expect(task.id).to.exist; ",
							"        pm.expect(task.id).to.be.a('number');",
							"    });",
							"});",
							"",
							"",
							"if(currentAmountOfTasks < pm.environment.get('targetNumberOfTasks')) {",
							"    console.log('Not enough tasks');",
							"    console.log('currentAmountOfTasks: ' + currentAmountOfTasks + ' < ' + 'targetNumberOfTasks: ' + pm.environment.get('targetNumberOfTasks'));",
							"    postman.setNextRequest('create a task')",
							"} else {",
							"    console.log('Task list is full');",
							"    console.log('currentAmountOfTasks: ' + currentAmountOfTasks + ' >= ' + 'targetNumberOfTasks: ' + pm.environment.get('targetNumberOfTasks'));",
							"    pm.environment.set('lastID', jsonData[currentAmountOfTasks-1].id);",
							"    postman.setNextRequest('change task text');",
							"    ",
							"    }",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "f97099cd-9d65-4356-a26d-d04efd8d2edd",
						"exec": [
							"console.log('getting task list');\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "644df36e-9401-4553-90cc-592474715449",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "*/*"
					},
					{
						"key": "Authorization",
						"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDY1MTA3OCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDA1NjQ2Nzh9.vIN53s5RHi0_NuFKchJ3Wxi3ajjjtTt_0X_qJSYtFti7Xw4Veqy9jEpRervasFgwCyrZGihIehGmwaUXLYIaFg"
					},
					{
						"key": "x-mock-response-code",
						"value": "200",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/tasks?page=0&size=500",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"tasks"
					],
					"query": [
						{
							"key": "page",
							"value": "0"
						},
						{
							"key": "size",
							"value": "500"
						}
					]
				}
			},
			"response": [
				{
					"id": "7a602a0b-89e1-4536-a87a-6b62ffb796b4",
					"name": "get tasks list 200",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDY1MTA3OCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDA1NjQ2Nzh9.vIN53s5RHi0_NuFKchJ3Wxi3ajjjtTt_0X_qJSYtFti7Xw4Veqy9jEpRervasFgwCyrZGihIehGmwaUXLYIaFg"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/tasks?page=0&size=500",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "500"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"name": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "[\r\n    {\r\n        \"id\": 1001,\r\n        \"text\": \"ttest \",\r\n        \"answer\": \"answer\",\r\n        \"title\": \"test task\"\r\n    },\r\n    {\r\n        \"id\": 1002,\r\n        \"text\": \"12\",\r\n        \"answer\": \"12\",\r\n        \"title\": \"12\"\r\n    }\r\n]"
				},
				{
					"id": "b96b9d43-76cc-4084-b1aa-5bc106c7d453",
					"name": "get tasks list 403",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/tasks?page=0&size=500",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "500"
								}
							]
						}
					},
					"status": "Forbidden",
					"code": 403,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"name": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\r\n    \"error\": \"Token not valid\"\r\n}"
				},
				{
					"id": "0a6bee6a-1887-4940-b156-dd4947e4e62b",
					"name": "get tasks list 401",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/tasks?page=0&size=500",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "500"
								}
							]
						}
					},
					"status": "Unauthorized",
					"code": 401,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"name": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\r\n    \"error\": \"Token not provided\"\r\n}"
				}
			]
		},
		{
			"name": "create a task",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ae8f0d94-31df-477d-88d2-c10232a33435",
						"exec": [
							"console.log('creating new task');",
							"let assert = require('chai').assert;",
							"let jsonData = pm.response.json();",
							"const ids = pm.environment.get(\"ids\")",
							"",
							"pm.test(\"response is JSON\", function () {",
							"    assert.exists(jsonData);",
							"});",
							"",
							"pm.test(\"Content-Type is present\", function () {",
							"    assert.isDefined(pm.response.headers.get(\"Content-Type\"));",
							"});",
							"",
							"pm.test(\"Date is present\", function () {",
							"    assert.isDefined(pm.response.headers.get(\"Date\"));",
							"});",
							"",
							"pm.test(\"Content-Encoding is present\", function () {",
							"    assert.isDefined(pm.response.headers.get(\"Content-Encoding\"));",
							"});",
							"",
							"pm.test(\"Status code is 201\", function () {",
							"    assert.equal(pm.response.code,'201');",
							"});",
							"",
							"console.log(\"jsonData.id is \" + jsonData.id)",
							"ids.push(jsonData.id)",
							"console.log(ids)",
							"pm.environment.set(\"ids\", ids)",
							"",
							"pm.environment.set('lastID', jsonData.id)",
							"",
							"let currentAmountOfTasks = pm.environment.get(\"currentAmountOfTasks\");",
							"currentAmountOfTasks++;",
							"pm.environment.set('currentAmountOfTasks', currentAmountOfTasks)",
							"",
							"if(currentAmountOfTasks < pm.environment.get('targetNumberOfTasks')) {",
							"    console.log('Not enough tasks');",
							"    postman.setNextRequest(\"create a task\")",
							"} else {",
							"    console.log('Task list is full');",
							"    postman.setNextRequest('change task text')",
							"}",
							"",
							"pm.test(\"Response has the required fields - id, text, answer, and title\", function () {",
							"    ",
							"    pm.expect(jsonData).to.be.an('object');",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData).to.have.property('text');",
							"    pm.expect(jsonData).to.have.property('answer');",
							"    pm.expect(jsonData).to.have.property('title');",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"Id is a positive integer\", function () {",
							"    ",
							"    pm.expect(jsonData.id).to.be.a('number');",
							"    pm.expect(jsonData.id).to.be.greaterThan(0);",
							"});",
							"",
							"let schema = {",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
							"  \"type\": \"object\",",
							"  \"properties\": {",
							"    \"id\": {",
							"      \"type\": \"integer\"",
							"    },",
							"    \"text\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"answer\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"title\": {",
							"      \"type\": \"string\"",
							"    }",
							"  },",
							"  \"required\": [\"id\", \"text\", \"answer\", \"title\"]",
							"}",
							"",
							"",
							"pm.test('JSON schema for response is correct', () => {",
							"  pm.response.to.have.jsonSchema (schema);",
							"});",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "e7da6c9d-1dfe-41df-9ddf-248e5fb9aca6",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "accept",
						"value": "*/*"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDY1MTA3OCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDA1NjQ2Nzh9.vIN53s5RHi0_NuFKchJ3Wxi3ajjjtTt_0X_qJSYtFti7Xw4Veqy9jEpRervasFgwCyrZGihIehGmwaUXLYIaFg"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"text\": \"some text\",\n  \"answer\": \"string\",\n  \"title\": \"string\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/tasks",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"tasks"
					]
				}
			},
			"response": [
				{
					"id": "46822d02-ae78-436c-a609-cb7e3e21b445",
					"name": "create a task 201",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDY1MTA3OCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDA1NjQ2Nzh9.vIN53s5RHi0_NuFKchJ3Wxi3ajjjtTt_0X_qJSYtFti7Xw4Veqy9jEpRervasFgwCyrZGihIehGmwaUXLYIaFg"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"text\": \"some text\",\n  \"answer\": \"string\",\n  \"title\": \"string\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tasks",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"name": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": {{$randomInt}},\n    \"text\": \"some text\",\n    \"answer\": \"string\",\n    \"title\": \"string\"\n}"
				},
				{
					"id": "6ad5cb5d-f2bc-42cd-869a-da4417ff6f19",
					"name": "create a task - no title 400",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDY1MTA3OCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDA1NjQ2Nzh9.vIN53s5RHi0_NuFKchJ3Wxi3ajjjtTt_0X_qJSYtFti7Xw4Veqy9jEpRervasFgwCyrZGihIehGmwaUXLYIaFg"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"text\": \"some text\",\n  \"answer\": \"string\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tasks",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"name": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"error\": \"Required info is missing\"\n}"
				},
				{
					"id": "7458149f-b732-484d-baf3-c1e5629a1ef6",
					"name": "create a task no answer 400",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDY1MTA3OCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDA1NjQ2Nzh9.vIN53s5RHi0_NuFKchJ3Wxi3ajjjtTt_0X_qJSYtFti7Xw4Veqy9jEpRervasFgwCyrZGihIehGmwaUXLYIaFg"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"text\": \"some text\",\n   \"title\": \"string\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tasks",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"name": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"error\": \"Required info is missing\"\n}"
				},
				{
					"id": "2f5ba9b6-c14b-497f-a848-0f0df9ef1d91",
					"name": "create a task - no text 400",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDY1MTA3OCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDA1NjQ2Nzh9.vIN53s5RHi0_NuFKchJ3Wxi3ajjjtTt_0X_qJSYtFti7Xw4Veqy9jEpRervasFgwCyrZGihIehGmwaUXLYIaFg"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"answer\": \"string\",\n  \"title\": \"string\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tasks",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"name": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": {{$randomInt}},\n    \"text\": \"some text\",\n    \"answer\": \"string\",\n    \"title\": \"string\"\n}"
				}
			]
		},
		{
			"name": "change task text",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "00e31534-6b6b-4423-8e08-9faad62b09d2",
						"exec": [
							"console.log('changing task text')\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "a180fca4-1ea5-4094-be21-b20f87fccb2d",
						"exec": [
							"let assert = require('chai').assert;\r",
							"let jsonData = pm.response.json();\r",
							"let taskTextUpdated = pm.collectionVariables.get('taskTextUpdated')\r",
							"let lastID = pm.environment.get('lastID')\r",
							"\r",
							"pm.test(\"response is JSON\", function () {\r",
							"   assert.exists(jsonData);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    assert.isDefined(pm.response.headers.get(\"Content-Type\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Date is present\", function () {\r",
							"    assert.isDefined(pm.response.headers.get(\"Date\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Encoding is present\", function () {\r",
							"    assert.isDefined(pm.response.headers.get(\"Content-Encoding\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    assert.equal(pm.response.code, '200');\r",
							"});\r",
							"\r",
							"pm.test(\"Updated text in response is correct\", function () {\r",
							"    assert.equal(jsonData.id, lastID)\r",
							"    assert.equal(jsonData.text, taskTextUpdated);\r",
							"});\r",
							"pm.test(\"Response contains the required fields\", function () {\r",
							"   \r",
							"    pm.expect(jsonData).to.be.an('object');\r",
							"    pm.expect(jsonData.id).to.exist;\r",
							"    pm.expect(jsonData.text).to.exist;\r",
							"    pm.expect(jsonData.answer).to.exist;\r",
							"    pm.expect(jsonData.title).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id in the response matches the lastID used in the request\", function () {\r",
							"    const lastID = pm.variables.get(\"lastID\");\r",
							"    \r",
							"    pm.expect(jsonData).to.have.property('id').that.is.equal(lastID);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Title is a non-empty string\", function () {\r",
							"    pm.expect(jsonData).to.be.an('object');\r",
							"    pm.expect(jsonData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Answer is a string\", function () {\r",
							"    \r",
							"    pm.expect(jsonData.answer).to.be.a('string');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has a valid Content-Type header\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"let schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"id\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"text\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"answer\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"title\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\"id\", \"text\", \"answer\", \"title\"]\r",
							"}\r",
							"\r",
							"\r",
							"pm.test('JSON schema for response is correct', () => {\r",
							"  pm.response.to.have.jsonSchema (schema);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "de6252fc-2df7-4d0d-9418-bba8e131bd9d",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "accept",
						"value": "*/*"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDY1MTA3OCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDA1NjQ2Nzh9.vIN53s5RHi0_NuFKchJ3Wxi3ajjjtTt_0X_qJSYtFti7Xw4Veqy9jEpRervasFgwCyrZGihIehGmwaUXLYIaFg"
					},
					{
						"key": "x-mock-response-code",
						"value": "200",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\": \"{{lastID}}\",\n  \"text\": \"update text\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/tasks/{{lastID}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"tasks",
						"{{lastID}}"
					]
				}
			},
			"response": [
				{
					"id": "c778b916-daf5-49e7-8286-8da6b60b049d",
					"name": "change task text 200",
					"originalRequest": {
						"method": "PATCH",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDY1MTA3OCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDA1NjQ2Nzh9.vIN53s5RHi0_NuFKchJ3Wxi3ajjjtTt_0X_qJSYtFti7Xw4Veqy9jEpRervasFgwCyrZGihIehGmwaUXLYIaFg"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{lastID}}\",\n  \"text\": \"update text\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tasks/{{lastID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks",
								"{{lastID}}"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"name": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": {{$body 'id'}},\n    \"text\": \"update text\",\n    \"answer\": \"string\",\n    \"title\": \"string\"\n}"
				},
				{
					"id": "6ba6676f-4be7-4cc1-8b28-0bbdcab43cf6",
					"name": "change task text - empty id 400",
					"originalRequest": {
						"method": "PATCH",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDY1MTA3OCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDA1NjQ2Nzh9.vIN53s5RHi0_NuFKchJ3Wxi3ajjjtTt_0X_qJSYtFti7Xw4Veqy9jEpRervasFgwCyrZGihIehGmwaUXLYIaFg"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"\",\n  \"text\": \"update text\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tasks/{{lastID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks",
								"{{lastID}}"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"name": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"error\": \"Required info is missing\"\n}"
				},
				{
					"id": "ae63e5cb-2a58-40ef-be9c-c80d51019599",
					"name": "change task text - empty text 400",
					"originalRequest": {
						"method": "PATCH",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDY1MTA3OCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDA1NjQ2Nzh9.vIN53s5RHi0_NuFKchJ3Wxi3ajjjtTt_0X_qJSYtFti7Xw4Veqy9jEpRervasFgwCyrZGihIehGmwaUXLYIaFg"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{lastID}}\",\n  \"text\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tasks/{{lastID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks",
								"{{lastID}}"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"name": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"error\": \"Required info is missing\"\n}"
				}
			]
		},
		{
			"name": "get task data",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6f6a8430-bb20-475e-960b-1b2170043dc8",
						"exec": [
							"let assert = require('chai').assert;",
							"let arr = pm.environment.get('ids')",
							"let jsonData = pm.response.json();",
							"let taskTextUpdated = pm.collectionVariables.get('taskTextUpdated')",
							"let lastID = pm.environment.get('lastID')",
							"",
							"pm.test(\"response is JSON\", function () {",
							"    assert.exists(jsonData);",
							"});",
							"",
							"pm.test(\"Content-Type is present\", function () {",
							"    assert.isDefined(pm.response.headers.get(\"Content-Type\"));",
							"});",
							"",
							"pm.test(\"Date is present\", function () {",
							"    assert.isDefined(pm.response.headers.get(\"Date\"));",
							"});",
							"",
							"pm.test(\"Content-Encoding is present\", function () {",
							"    assert.isDefined(pm.response.headers.get(\"Content-Encoding\"));",
							"});",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    assert.equal(pm.response.code, '200');",
							"});",
							"",
							"pm.test(\"Updated text in response is correct\", function () {",
							"    assert.equal(jsonData.id, lastID)",
							"    assert.equal(jsonData.text, taskTextUpdated);",
							"});",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"",
							"    pm.expect(jsonData).to.be.an('object');",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData).to.have.property('text');",
							"    pm.expect(jsonData).to.have.property('answer');",
							"    pm.expect(jsonData).to.have.property('title');",
							"});",
							"",
							"",
							"pm.test(\"ID is a non-negative integer\", function () {",
							"    ",
							"    pm.expect(jsonData.id).to.be.a('number');",
							"    pm.expect(jsonData.id).to.be.at.least(0);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Validate the Date header is in a valid date format\", function () {",
							"    const dateHeader = pm.response.headers.get(\"Date\");",
							"    pm.expect(dateHeader).to.match(/^\\w{3}, \\d{2} \\w{3} \\d{4} \\d{2}:\\d{2}:\\d{2} \\w{3}$/);",
							"});",
							"",
							"if(arr){arr.forEach((id)=>{",
							"    console.log('deleting task')",
							"    pm.sendRequest(",
							"        {url: `${pm.environment.get('baseUrl')}/tasks/${id}`,",
							"        method: 'DELETE',",
							"        header:",
							"        {'Authorization': 'Bearer ' + pm.environment.get('token'),",
							"        'accept': '*/*'}",
							"        }",
							"        , function (err, response) {",
							"        console.log(response);",
							"    });",
							"})",
							"}",
							"",
							"console.log('unsetting variables');",
							"pm.environment.unset('token');",
							"pm.environment.unset('ids');",
							"pm.environment.unset('lastID');",
							"pm.environment.unset('currentAmountOfTasks');",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "605d1e16-d9a2-4753-a45c-d1c7f69a9ac5",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "*/*"
					},
					{
						"key": "Authorization",
						"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDY1MTA3OCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDA1NjQ2Nzh9.vIN53s5RHi0_NuFKchJ3Wxi3ajjjtTt_0X_qJSYtFti7Xw4Veqy9jEpRervasFgwCyrZGihIehGmwaUXLYIaFg"
					},
					{
						"key": "x-mock-response-code",
						"value": "401",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{baseUrl}}/tasks/{{lastID}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"tasks",
						"{{lastID}}"
					]
				}
			},
			"response": [
				{
					"id": "3afaf6bf-c412-4e6c-9c5e-4d4cd4615436",
					"name": "get task data  200",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDY1MTA3OCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDA1NjQ2Nzh9.vIN53s5RHi0_NuFKchJ3Wxi3ajjjtTt_0X_qJSYtFti7Xw4Veqy9jEpRervasFgwCyrZGihIehGmwaUXLYIaFg"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/tasks/{{lastID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks",
								"{{lastID}}"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"name": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\r\n    \"id\": {{$pathSegments '1'}},\r\n    \"text\": \"update text\",\r\n    \"answer\": \"string\",\r\n    \"title\": \"string\"\r\n}"
				},
				{
					"id": "471a021c-14c6-422c-b859-36a9e00a8766",
					"name": "get task data 403",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDY1MTA3OCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDA1NjQ2Nzh9.vIN53s5RHi0_NuFKchJ3Wxi3ajjjtTt_0X_qJSYtFti7Xw4Veqy9jEpRervasFgwCyrZGihIehGmwaUXLYIaFg"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/tasks/{{lastID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks",
								"{{lastID}}"
							]
						}
					},
					"status": "Forbidden",
					"code": 403,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"name": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\r\n    \"error\": \"Token not valid\"\r\n}"
				},
				{
					"id": "c25e89a2-691f-4841-b750-39bf9a54b3de",
					"name": "get task data 401",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDY1MTA3OCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDA1NjQ2Nzh9.vIN53s5RHi0_NuFKchJ3Wxi3ajjjtTt_0X_qJSYtFti7Xw4Veqy9jEpRervasFgwCyrZGihIehGmwaUXLYIaFg"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/tasks/{{lastID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks",
								"{{lastID}}"
							]
						}
					},
					"status": "Unauthorized",
					"code": 401,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"name": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\r\n    \"error\": \"Token not provided\"\r\n}"
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "69019b6d-aa7c-4315-a423-d31bd030ce67",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "c3fc184c-f312-4509-83a1-85f6b6fd91c2",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "4d74f055-06a4-4f73-a8ad-91d4529073f7",
			"key": "taskTextUpdated",
			"value": "update text",
			"type": "string"
		}
	]
}